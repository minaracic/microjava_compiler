package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

nonterminal DeclList DeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarDecl VarDecl;
nonterminal AbstractClassDecl AbstractClassDecl;
nonterminal ClassDecl ClassDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ExtendsDecl ExtendsDecl;
nonterminal ConstValueList ConstValueList;
nonterminal VarDeclList VarDeclList;
nonterminal OptionalBracket OptionalBracket;
nonterminal VarDeclListList VarDeclListList;
nonterminal MethodOrAbstractMethodDeclList MethodOrAbstractMethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal AbstractMethodDecl AbstractMethodDecl;
nonterminal OptionalFormPars OptionalFormPars;
nonterminal StatementList StatementList;
nonterminal FormPars FormPars;
nonterminal FormParsList FormParsList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Condition Condition;
nonterminal OptionalDesignatorStatement OptionalDesignatorStatement;
nonterminal OptionalCondition OptionalCondition;
nonterminal OptionalExpr OptionalExpr;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal AddopLeft AddopLeft;
nonterminal AddopRight AddopRight;
nonterminal Assignop Assignop;
nonterminal ActPars ActPars;
nonterminal OptionalActPars OptionalActPars;
nonterminal MulopRight MulopRight;
nonterminal MulopLeft MulopLeft;
nonterminal Mulop Mulop;
nonterminal ClassMethods ClassMethods;
nonterminal ConstVarDecl ConstVarDecl;
nonterminal ArrayDecl ArrayDecl;
nonterminal TypeOrVoid TypeOrVoid;

terminal PROG, LBRACE, RBRACE, EQUAL, COMMA, CONST, SEMI, LBRACKET, RBRACKET, ABSTRACT;
terminal EXTENDS, LPARENT, RPARENT, CLASS, IF, FOR, BREAK, CONTINUE, READ, RETURN, PRINT, PLUSPLUS, MINUSMINUS, ELSE, MINUS, AND;
terminal OR, ISEQUAL, ISNOTEQUAL, GRE, GREEQUAL, SML, SMLEQUAL, PLUS, NEW, DOT, VOID, MUL, DIV, MODULE, PLUSEQ, MINUSEQ, MULEQ, MODEQ, DIVEQ;

terminal Integer NUMCONST;
terminal Character CHARCONST;
terminal Boolean BOOLCONST; //add type of Boolean
terminal String IDENT;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, ConstValue, FunctionIdent, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ConstType, Term, Expr, Factor;

precedence left ELSE;

Program ::= (Program) PROG ProgName:P1 DeclList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};
					
DeclList ::= (DeclListConstDecl) DeclList:D1 ConstDecl:C2 {: RESULT=new DeclListConstDecl(D1, C2); RESULT.setLine(D1left); :} 
		|
		(DeclListVarDecl) DeclList:D1 VarDecl:V2 {: RESULT=new DeclListVarDecl(D1, V2); RESULT.setLine(D1left); :}
		|
		(DeclListAbstractClass) DeclList:D1 AbstractClassDecl:A2 {: RESULT=new DeclListAbstractClass(D1, A2); RESULT.setLine(D1left); :}
		|
		(DeclListClass) DeclList:D1 ClassDecl:C2 {: RESULT=new DeclListClass(D1, C2); RESULT.setLine(D1left); :}
		| 
		(NoDeclList) {: RESULT=new NoDeclList(); :};

ConstDecl ::= (ConstDecl) CONST ConstType:C1 ConstVarDecl:C2 ConstValueList:C3 SEMI {: RESULT=new ConstDecl(C1, C2, C3); RESULT.setLine(C1left); :};

ConstType ::= (ConstType) Type:T1 {: RESULT=new ConstType(T1); RESULT.setLine(T1left); :};

ConstValueList ::= (WithConstValueList) ConstValueList:C1 COMMA ConstVarDecl:C2 {: RESULT=new WithConstValueList(C1, C2); RESULT.setLine(C1left); :}
				|
				(NoConstValueList) {: RESULT=new NoConstValueList(); :} /* epsilon */
				;

ConstVarDecl ::= (ConstVarDecl) IDENT:varName EQUAL ConstValue:C1 {: RESULT=new ConstVarDecl(varName, C1); RESULT.setLine(varNameleft); :};

ConstValue ::= (NUMBER)NUMCONST:N1 {: RESULT=new NUMBER(N1); RESULT.setLine(N1left); :}
			|
			 (CHAR)CHARCONST:C1 {: RESULT=new CHAR(C1); RESULT.setLine(C1left); :}
			|
			 (BOOL)BOOLCONST:B1 {: RESULT=new BOOL(B1); RESULT.setLine(B1left); :};
			
VarDecl ::= (VarList)ConstType:C1 IDENT:varName VarDeclListList:V2 SEMI {: RESULT=new VarList(C1, varName, V2); RESULT.setLine(C1left); :}
			|
			(VarDeclArray)ConstType:C1 ArrayDecl:A2 VarDeclListList:V3 SEMI {: RESULT=new VarDeclArray(C1, A2, V3); RESULT.setLine(C1left); :}
			|
			error COMMA:l
			{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new VarDeclDerived1(); :}
			|
			error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new VarDeclDerived2(); :};

VarDeclListList ::= (VarArray) VarDeclListList:V1 COMMA ArrayDecl:A2 {: RESULT=new VarArray(V1, A2); RESULT.setLine(V1left); :}
			|
			(VarDeclSingle) VarDeclListList:V1 COMMA IDENT:varName {: RESULT=new VarDeclSingle(V1, varName); RESULT.setLine(V1left); :}
			|
			error COMMA:l
			{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :} {: RESULT=new VarDeclListListDerived1(); :}
			|
			error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :} {: RESULT=new VarDeclListListDerived2(); :}
			|
			(NoVarDeclListList) {: RESULT=new NoVarDeclListList(); :};
			
ArrayDecl ::= (ArrayInit)IDENT:arrayName LBRACKET RBRACKET {: RESULT=new ArrayInit(arrayName); RESULT.setLine(arrayNameleft); :};
			
VarDeclList ::= (WithVarDeclList) VarDeclList:V1 VarDecl:V2 {: RESULT=new WithVarDeclList(V1, V2); RESULT.setLine(V1left); :}
		      | (NoVarDeclList) {: RESULT=new NoVarDeclList(); :};

OptionalBracket ::= (WithBracket) LBRACKET RBRACKET {: RESULT=new WithBracket(); :} 
			|
			(NoParent) {: RESULT=new NoParent(); :};
			
AbstractClassDecl ::= (AbstractClass)ABSTRACT CLASS IDENT:I1 ExtendsDecl:E2 LBRACE VarDeclList:V3 RBRACE {: RESULT=new AbstractClass(I1, E2, V3); RESULT.setLine(I1left); :}
					|
					(AbstractClassWithMethods)ABSTRACT CLASS IDENT:I1 ExtendsDecl:E2 LBRACE VarDeclList:V3 LBRACE MethodOrAbstractMethodDeclList:M4 RBRACE RBRACE {: RESULT=new AbstractClassWithMethods(I1, E2, V3, M4); RESULT.setLine(I1left); :};

MethodOrAbstractMethodDeclList ::= (MethodList) MethodOrAbstractMethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodList(M1, M2); RESULT.setLine(M1left); :} 
								|  
								(AbstractList) MethodOrAbstractMethodDeclList:M1 AbstractMethodDecl:A2 {: RESULT=new AbstractList(M1, A2); RESULT.setLine(M1left); :}
								| 
								(NoMethodOrAbstractMethodDeclList) {: RESULT=new NoMethodOrAbstractMethodDeclList(); :};

ExtendsDecl ::= (WithExtendsDecl) EXTENDS Type:T1 {: RESULT=new WithExtendsDecl(T1); RESULT.setLine(T1left); :} 
				| (NoExtendsDecl) {: RESULT=new NoExtendsDecl(); :} ;
				 
MethodDecl ::= (MethodDecl)FunctionIdent:F1 LPARENT OptionalFormPars:O2 RPARENT VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(F1, O2, V3, S4); RESULT.setLine(F1left); :};

FunctionIdent ::= (FunctionType)Type:T1 IDENT:funcName {: RESULT=new FunctionType(T1, funcName); RESULT.setLine(T1left); :}
				|
				(FunctionVoid)VOID IDENT:funcName {: RESULT=new FunctionVoid(funcName); RESULT.setLine(funcNameleft); :};

FormPars ::= (FormPars)Type:T1 IDENT:I2 OptionalBracket:O3 FormParsList:F4 {: RESULT=new FormPars(T1, I2, O3, F4); RESULT.setLine(T1left); :};

FormParsList ::= (WithFormParsList)FormParsList:F1 COMMA Type:T2 IDENT:I3 OptionalBracket:O4 {: RESULT=new WithFormParsList(F1, T2, I3, O4); RESULT.setLine(F1left); :}
				| 
				(NoFormParsList) {: RESULT=new NoFormParsList(); :};
 
ClassDecl ::= (ClassDecl) CLASS IDENT:I1 ExtendsDecl:E2 LBRACE VarDeclList:V3 ClassMethods:C4 RBRACE {: RESULT=new ClassDecl(I1, E2, V3, C4); RESULT.setLine(I1left); :};

ClassMethods ::= (MethodsOfClass)LBRACE MethodDeclList:M1 RBRACE {: RESULT=new MethodsOfClass(M1); RESULT.setLine(M1left); :};

MethodDeclList ::= (WithMethodDeclList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new WithMethodDeclList(M1, M2); RESULT.setLine(M1left); :}
				| (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :}; 
						
TypeOrVoid ::= (TypeOrVoidType) Type:T1 {: RESULT=new TypeOrVoidType(T1); RESULT.setLine(T1left); :} 
			 | 
			 (TypeOrVoidVoid) VOID {: RESULT=new TypeOrVoidVoid(); :};
			 
OptionalFormPars ::= (WithFormPars) FormPars:F1 {: RESULT=new WithFormPars(F1); RESULT.setLine(F1left); :}
 					| (NoFormPars) {: RESULT=new NoFormPars(); :};
 					
Type ::= (Type)IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

StatementList ::= (WithStatementList) StatementList:S1 Statement:S2 {: RESULT=new WithStatementList(S1, S2); RESULT.setLine(S1left); :}
				| 
				(NoStatementList) {: RESULT=new NoStatementList(); :};
 					
Statement ::= (StatementDesignator)DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
			|
			(IF)IF LPARENT Condition:C1 RPARENT Statement:S2 {: RESULT=new IF(C1, S2); RESULT.setLine(C1left); :}
			|
			(Else)IF LPARENT Condition:C1 RPARENT Statement:S2 ELSE Statement:S3 {: RESULT=new Else(C1, S2, S3); RESULT.setLine(C1left); :}
			|
			(For)FOR LPARENT OptionalDesignatorStatement:O1 SEMI OptionalCondition:O2 SEMI OptionalDesignatorStatement:O3 RPARENT Statement:S4 {: RESULT=new For(O1, O2, O3, S4); RESULT.setLine(O1left); :}
			|
			(Break)BREAK SEMI {: RESULT=new Break(); :}
			|
			(Continue)CONTINUE SEMI {: RESULT=new Continue(); :}
			|
			(Return)RETURN OptionalExpr:O1 SEMI {: RESULT=new Return(O1); RESULT.setLine(O1left); :}
			|
			(Read)READ LPARENT Designator:D1 RPARENT SEMI {: RESULT=new Read(D1); RESULT.setLine(D1left); :}
			|
			(PrintWithConst)PRINT LPARENT Expr:E1 COMMA NUMCONST:N2 RPARENT SEMI {: RESULT=new PrintWithConst(E1, N2); RESULT.setLine(E1left); :}
			|
			(Print)PRINT LPARENT Expr:E1 RPARENT SEMI {: RESULT=new Print(E1); RESULT.setLine(E1left); :}
			|
			(Statements)LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :} ;
			
AbstractMethodDecl ::= (AbstractMethodDecl)ABSTRACT TypeOrVoid:T1 IDENT:I2 LPARENT OptionalFormPars:O3 RPARENT {: RESULT=new AbstractMethodDecl(T1, I2, O3); RESULT.setLine(T1left); :};

DesignatorStatement ::= (DesignatorAssign)Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssign(D1, A2, E3); RESULT.setLine(D1left); :} 
					|
					(DesignatorFuncCall)Designator:D1 LPARENT OptionalActPars:O2 RPARENT {: RESULT=new DesignatorFuncCall(D1, O2); RESULT.setLine(D1left); :}
					|
					(Inc)Designator:D1 PLUSPLUS {: RESULT=new Inc(D1); RESULT.setLine(D1left); :}
					|
					(Dec)Designator:D1 MINUSMINUS {: RESULT=new Dec(D1); RESULT.setLine(D1left); :};

Condition ::= (ConditionA)CondTerm:C1 {: RESULT=new ConditionA(C1); RESULT.setLine(C1left); :} 
			|
			(ConditionOR)Condition:C1 OR CondTerm:C2 {: RESULT=new ConditionOR(C1, C2); RESULT.setLine(C1left); :};
				
OptionalDesignatorStatement ::= (WithDesignatorStatement)DesignatorStatement:D1 {: RESULT=new WithDesignatorStatement(D1); RESULT.setLine(D1left); :} 
								|
								(NoDesignatorStatement) {: RESULT=new NoDesignatorStatement(); :};
								
OptionalCondition ::= (WithCondition)Condition:C1 {: RESULT=new WithCondition(C1); RESULT.setLine(C1left); :}
					|
					(NoCondition) {: RESULT=new NoCondition(); :};
					
OptionalExpr ::= (WithExpr)Expr:E1 {: RESULT=new WithExpr(E1); RESULT.setLine(E1left); :}
				|
				(NoExpr) {: RESULT=new NoExpr(); :};

CondTerm ::= (CondTermFact)CondFact:C1 {: RESULT=new CondTermFact(C1); RESULT.setLine(C1left); :} 
			|
			(CondTermAnd)CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermAnd(C1, C2); RESULT.setLine(C1left); :};
				
CondFact ::= (CondFactExpr)Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :} 
			|
			(CondFactRelop)Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :};


Relop ::= (RelopEql)ISEQUAL {: RESULT=new RelopEql(); :} | (RelopNotEql)ISNOTEQUAL {: RESULT=new RelopNotEql(); :} | (RelopGre)GRE {: RESULT=new RelopGre(); :} | (RelopGreEql)GREEQUAL {: RESULT=new RelopGreEql(); :} | (RelopSml)SML {: RESULT=new RelopSml(); :} | (RelopSmlEql)SMLEQUAL {: RESULT=new RelopSmlEql(); :};

Addop ::= (LeftAddop)AddopLeft:A1 {: RESULT=new LeftAddop(A1); RESULT.setLine(A1left); :} | (RightAddop)AddopRight:A1 {: RESULT=new RightAddop(A1); RESULT.setLine(A1left); :};

AddopRight ::= (PLUSEQ) PLUSEQ {: RESULT=new PLUSEQ(); :} | (MINUSEQ)MINUSEQ {: RESULT=new MINUSEQ(); :};

AddopLeft ::= (AddopMin)MINUS {: RESULT=new AddopMin(); :} | (AddopPls)PLUS {: RESULT=new AddopPls(); :};

Assignop ::= (Equal)EQUAL {: RESULT=new Equal(); :}
			|
			(AssignAddopR)AddopRight:A1 {: RESULT=new AssignAddopR(A1); RESULT.setLine(A1left); :}
			|
			(AssignMulopR)MulopRight:M1 {: RESULT=new AssignMulopR(M1); RESULT.setLine(M1left); :};

ActPars ::= (ActParsList)ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsList(A1, E2); RESULT.setLine(A1left); :}
			|
			(ActParsExpr)Expr:E1 {: RESULT=new ActParsExpr(E1); RESULT.setLine(E1left); :};

Factor ::= (FactorDesignator)Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :} 
		|
		(FuncCall)Designator:D1 LPARENT OptionalActPars:O2 RPARENT {: RESULT=new FuncCall(D1, O2); RESULT.setLine(D1left); :}
		|
		(FactorConst)ConstValue:C1 {: RESULT=new FactorConst(C1); RESULT.setLine(C1left); :}
	 	|
	 	(FactorNewExpr)NEW Type:T1 LBRACKET Expr:E2 RBRACKET {: RESULT=new FactorNewExpr(T1, E2); RESULT.setLine(T1left); :}
	 	|
	 	(FactorNewType)NEW Type:typeName {: RESULT=new FactorNewType(typeName); RESULT.setLine(typeNameleft); :} 
	 	|
	 	(ExprInParent)LPARENT Expr:E1 RPARENT {: RESULT=new ExprInParent(E1); RESULT.setLine(E1left); :};
	 	
Designator ::= (DesignatorIdent)IDENT:I1 {: RESULT=new DesignatorIdent(I1); RESULT.setLine(I1left); :}
  			|
  			(DesignatorAtrib)Designator:D1 DOT IDENT:I2 {: RESULT=new DesignatorAtrib(D1, I2); RESULT.setLine(D1left); :}
  			|
  			(DesignatorArr)Designator:D1 LBRACKET Expr:E2 RBRACKET {: RESULT=new DesignatorArr(D1, E2); RESULT.setLine(D1left); :};
  			
Expr ::= (ExprAddopRight)Expr:E1 AddopRight:A2 Term:T3 {: RESULT=new ExprAddopRight(E1, A2, T3); RESULT.setLine(E1left); :} 
	  |
	  (ExprAddopLeft)Expr:E1 AddopLeft:A2 Term:T3 {: RESULT=new ExprAddopLeft(E1, A2, T3); RESULT.setLine(E1left); :}
      |
      (ExprTerm)Term:T1 {: RESULT=new ExprTerm(T1); RESULT.setLine(T1left); :} 
      |
      (ExprMin)MINUS Term:T1 {: RESULT=new ExprMin(T1); RESULT.setLine(T1left); :};
      
Term ::= (TermFactor)Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :}
		|
		(TermMulop)Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMulop(T1, M2, F3); RESULT.setLine(T1left); :};

OptionalActPars ::= (WithActPars)ActPars:A1 {: RESULT=new WithActPars(A1); RESULT.setLine(A1left); :} 
				|
				(NoActPars) {: RESULT=new NoActPars(); :};
				
Mulop ::= (LeftMulop)MulopLeft:M1 {: RESULT=new LeftMulop(M1); RESULT.setLine(M1left); :} | (RightMulop)MulopRight:M1 {: RESULT=new RightMulop(M1); RESULT.setLine(M1left); :};

MulopLeft ::= (MUL)MUL {: RESULT=new MUL(); :}
		|
		(DIV)DIV {: RESULT=new DIV(); :}
		|
		(MOD)MODULE {: RESULT=new MOD(); :};
		
MulopRight ::= (MULEQ)MULEQ {: RESULT=new MULEQ(); :}
			|
			(DIVEQ)DIVEQ {: RESULT=new DIVEQ(); :}
			|
			(MODEQ)MODEQ {: RESULT=new MODEQ(); :};


















